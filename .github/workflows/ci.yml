name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  # Used to select the version of Godot to run the tests with.
  GODOT_TEST_VERSION: 4.3-stable
  # Use UTF-8 on Linux.
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:

  # run the pre-commit hooks and commit any changes
  lint:
    name: pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pre-commit/action@v3.0.1
      - uses: pre-commit-ci/lite-action@v1.1.0
        if: always()

  build:
    name: Build GDExtension
    uses: ./.github/workflows/build.yml

  test:
    name: Run tests
    needs: build
    runs-on: ubuntu-22.04
    env:
      BUILD_ARTIFACT_NAME: ${{ needs.build.outputs.artifact-name }}
      BUILD_ARTIFACT_PATH: demo/addons/${{ needs.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.BUILD_ARTIFACT_NAME }}-*
          path: ${{ env.BUILD_ARTIFACT_PATH }}
          merge-multiple: true

      - name: Download requested Godot version for testing
        run: |
          wget "https://github.com/godotengine/godot-builds/releases/download/${GODOT_TEST_VERSION}/Godot_v${GODOT_TEST_VERSION}_linux.x86_64.zip" -O Godot.zip
          unzip -a Godot.zip
          chmod +x "Godot_v${GODOT_TEST_VERSION}_linux.x86_64"
          echo "GODOT=$(pwd)/Godot_v${GODOT_TEST_VERSION}_linux.x86_64" >> $GITHUB_ENV

      - name: Run GDScript tests
        run: |
          set -x
          $GODOT --headless --version

          # workaround for https://github.com/bitwes/Gut/issues/589, create the
          # .godot directory so GUT can find GutUtils
          (cd demo &&
              (timeout 30 $GODOT --import --headless >/dev/null 2>&1 || true))

          # actually run the tests, we need to save the output to check for
          # test failures
          $GODOT --headless -s addons/gut/gut_cmdln.gd --path ./demo 2>&1 |
              tee test-output.txt

          # check for failing tests
          if grep -qE -- "---- [0-9]+ failing tests ----" test-output.txt; then
            exit 1
          fi

          # check for script errors
          if grep -EC 3 -- "SCRIPT ERROR:" test-output.txt; then
            echo "*** Tests failed due to script errors***"
            exit 1
          fi

          # cd test
          # # Need to run the editor so .godot is generated... but it crashes! Ignore that :-)
          # (cd project && (timeout 30 $GODOT --import --headless >/dev/null 2>&1 || true))
          # ./run-tests.sh
